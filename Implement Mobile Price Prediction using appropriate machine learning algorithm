# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import GridSearchCV

# Step 1: Load the dataset (Mock dataset for this example)
# In practice, replace this with pd.read_csv('mobile_price.csv')
data = {
    'battery_power': np.random.randint(1000, 5000, 200),  # Battery power in mAh
    'ram': np.random.randint(1000, 8000, 200),            # RAM in MB
    'internal_memory': np.random.randint(4, 128, 200),    # Internal memory in GB
    'price_range': np.random.randint(0, 4, 200)           # Price range (target)
}

df = pd.DataFrame(data)

# Step 2: Preprocess the data
X = df.drop('price_range', axis=1)  # Features
y = df['price_range']               # Target

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Standardize the feature data (important for some algorithms)
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# Step 3: Train the Random Forest Regressor model
rf_model = RandomForestRegressor(n_estimators=100, random_state=42)

# Fit the model on the training data
rf_model.fit(X_train_scaled, y_train)

# Step 4: Make predictions
y_pred = rf_model.predict(X_test_scaled)

# Step 5: Evaluate the model
# Calculate performance metrics
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print(f"Mean Squared Error (MSE): {mse:.4f}")
print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
print(f"R-squared (R2): {r2:.4f}")
